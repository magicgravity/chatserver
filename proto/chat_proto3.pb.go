// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat_proto3.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	chat_proto3.proto

It has these top-level messages:
	CommonHeaderRequest
	CommonHeaderResponse
	UserInfo
	QueryUserInfoRequest
	QueryUserInfoResponse
	VerifyUserLoginByUidPwdRequest
	VerifyUserLoginByUidPwdResponse
	VerifyUserLoginByMobileSmsRequest
	VerifyUserLoginByMobileSmsResponse
	CheckUserExistRequest
	CheckUserExistResponse
	UserRegisterRequest
	UserRegisterResponse
	GetSmsCodeRequest
	GetSmsCodeResponse
	SearchOtherPersonsRequest
	SearchOtherPersonsResponse
	SendMakeFriendRequest
	SendMakeFriendResponse
	MessageDetail
	SendMsgRequest
	SendMsgResponse
	LogoutRequest
	LogoutResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type SexType int32

const (
	SexType_Male   SexType = 0
	SexType_Female SexType = 1
)

var SexType_name = map[int32]string{
	0: "Male",
	1: "Female",
}
var SexType_value = map[string]int32{
	"Male":   0,
	"Female": 1,
}

func (x SexType) String() string {
	return proto1.EnumName(SexType_name, int32(x))
}
func (SexType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 请求短信验证码   带上随机序号  防止短信轰炸;带上使用类型 用于短信内容拼接
type SmsCodeType int32

const (
	SmsCodeType_RegisterNewUser  SmsCodeType = 0
	SmsCodeType_ForgetAndFindPwd SmsCodeType = 1
	SmsCodeType_LoginByMobileSms SmsCodeType = 2
)

var SmsCodeType_name = map[int32]string{
	0: "RegisterNewUser",
	1: "ForgetAndFindPwd",
	2: "LoginByMobileSms",
}
var SmsCodeType_value = map[string]int32{
	"RegisterNewUser":  0,
	"ForgetAndFindPwd": 1,
	"LoginByMobileSms": 2,
}

func (x SmsCodeType) String() string {
	return proto1.EnumName(SmsCodeType_name, int32(x))
}
func (SmsCodeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// 搜索其他人 通过关键字
type SearchPersonKeyType int32

const (
	SearchPersonKeyType_ByUserId        SearchPersonKeyType = 0
	SearchPersonKeyType_ByUserName      SearchPersonKeyType = 1
	SearchPersonKeyType_ByUserIntroduce SearchPersonKeyType = 2
	SearchPersonKeyType_ByUserLocation  SearchPersonKeyType = 3
	SearchPersonKeyType_ByUserSex       SearchPersonKeyType = 4
	SearchPersonKeyType_ByUserMobileNo  SearchPersonKeyType = 5
)

var SearchPersonKeyType_name = map[int32]string{
	0: "ByUserId",
	1: "ByUserName",
	2: "ByUserIntroduce",
	3: "ByUserLocation",
	4: "ByUserSex",
	5: "ByUserMobileNo",
}
var SearchPersonKeyType_value = map[string]int32{
	"ByUserId":        0,
	"ByUserName":      1,
	"ByUserIntroduce": 2,
	"ByUserLocation":  3,
	"ByUserSex":       4,
	"ByUserMobileNo":  5,
}

func (x SearchPersonKeyType) String() string {
	return proto1.EnumName(SearchPersonKeyType_name, int32(x))
}
func (SearchPersonKeyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// 向好友发送消息
type MessageType int32

const (
	MessageType_PureTextMsg     MessageType = 0
	MessageType_TextImageMixMsg MessageType = 1
	MessageType_ImageMsg        MessageType = 2
	MessageType_AudioMsg        MessageType = 3
	MessageType_VideoMsg        MessageType = 4
	MessageType_FileMsg         MessageType = 5
)

var MessageType_name = map[int32]string{
	0: "PureTextMsg",
	1: "TextImageMixMsg",
	2: "ImageMsg",
	3: "AudioMsg",
	4: "VideoMsg",
	5: "FileMsg",
}
var MessageType_value = map[string]int32{
	"PureTextMsg":     0,
	"TextImageMixMsg": 1,
	"ImageMsg":        2,
	"AudioMsg":        3,
	"VideoMsg":        4,
	"FileMsg":         5,
}

func (x MessageType) String() string {
	return proto1.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type CommonHeaderRequest struct {
	VersionNo    string `protobuf:"bytes,1,opt,name=VersionNo" json:"VersionNo,omitempty"`
	ReqSeqNo     int64  `protobuf:"varint,2,opt,name=ReqSeqNo" json:"ReqSeqNo,omitempty"`
	ReqTime      string `protobuf:"bytes,3,opt,name=ReqTime" json:"ReqTime,omitempty"`
	IpAddr       string `protobuf:"bytes,4,opt,name=IpAddr" json:"IpAddr,omitempty"`
	DeviceType   int32  `protobuf:"varint,5,opt,name=DeviceType" json:"DeviceType,omitempty"`
	DeviceOsInfo string `protobuf:"bytes,6,opt,name=DeviceOsInfo" json:"DeviceOsInfo,omitempty"`
	TransCode    string `protobuf:"bytes,7,opt,name=TransCode" json:"TransCode,omitempty"`
	SessionId    string `protobuf:"bytes,8,opt,name=SessionId" json:"SessionId,omitempty"`
}

func (m *CommonHeaderRequest) Reset()                    { *m = CommonHeaderRequest{} }
func (m *CommonHeaderRequest) String() string            { return proto1.CompactTextString(m) }
func (*CommonHeaderRequest) ProtoMessage()               {}
func (*CommonHeaderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CommonHeaderRequest) GetVersionNo() string {
	if m != nil {
		return m.VersionNo
	}
	return ""
}

func (m *CommonHeaderRequest) GetReqSeqNo() int64 {
	if m != nil {
		return m.ReqSeqNo
	}
	return 0
}

func (m *CommonHeaderRequest) GetReqTime() string {
	if m != nil {
		return m.ReqTime
	}
	return ""
}

func (m *CommonHeaderRequest) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

func (m *CommonHeaderRequest) GetDeviceType() int32 {
	if m != nil {
		return m.DeviceType
	}
	return 0
}

func (m *CommonHeaderRequest) GetDeviceOsInfo() string {
	if m != nil {
		return m.DeviceOsInfo
	}
	return ""
}

func (m *CommonHeaderRequest) GetTransCode() string {
	if m != nil {
		return m.TransCode
	}
	return ""
}

func (m *CommonHeaderRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type CommonHeaderResponse struct {
	VersionNo string `protobuf:"bytes,1,opt,name=VersionNo" json:"VersionNo,omitempty"`
	ReqSeqNo  int64  `protobuf:"varint,2,opt,name=ReqSeqNo" json:"ReqSeqNo,omitempty"`
	ResSeqNo  int64  `protobuf:"varint,3,opt,name=ResSeqNo" json:"ResSeqNo,omitempty"`
	ResTime   string `protobuf:"bytes,4,opt,name=ResTime" json:"ResTime,omitempty"`
	MsgCode   string `protobuf:"bytes,5,opt,name=MsgCode" json:"MsgCode,omitempty"`
	MsgInfo   string `protobuf:"bytes,6,opt,name=MsgInfo" json:"MsgInfo,omitempty"`
	TransCode string `protobuf:"bytes,7,opt,name=TransCode" json:"TransCode,omitempty"`
	SessionId string `protobuf:"bytes,8,opt,name=SessionId" json:"SessionId,omitempty"`
}

func (m *CommonHeaderResponse) Reset()                    { *m = CommonHeaderResponse{} }
func (m *CommonHeaderResponse) String() string            { return proto1.CompactTextString(m) }
func (*CommonHeaderResponse) ProtoMessage()               {}
func (*CommonHeaderResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CommonHeaderResponse) GetVersionNo() string {
	if m != nil {
		return m.VersionNo
	}
	return ""
}

func (m *CommonHeaderResponse) GetReqSeqNo() int64 {
	if m != nil {
		return m.ReqSeqNo
	}
	return 0
}

func (m *CommonHeaderResponse) GetResSeqNo() int64 {
	if m != nil {
		return m.ResSeqNo
	}
	return 0
}

func (m *CommonHeaderResponse) GetResTime() string {
	if m != nil {
		return m.ResTime
	}
	return ""
}

func (m *CommonHeaderResponse) GetMsgCode() string {
	if m != nil {
		return m.MsgCode
	}
	return ""
}

func (m *CommonHeaderResponse) GetMsgInfo() string {
	if m != nil {
		return m.MsgInfo
	}
	return ""
}

func (m *CommonHeaderResponse) GetTransCode() string {
	if m != nil {
		return m.TransCode
	}
	return ""
}

func (m *CommonHeaderResponse) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type UserInfo struct {
	UserId    string  `protobuf:"bytes,1,opt,name=UserId" json:"UserId,omitempty"`
	UserName  string  `protobuf:"bytes,2,opt,name=UserName" json:"UserName,omitempty"`
	Sex       SexType `protobuf:"varint,3,opt,name=Sex,enum=proto.SexType" json:"Sex,omitempty"`
	AvatarUrl string  `protobuf:"bytes,4,opt,name=AvatarUrl" json:"AvatarUrl,omitempty"`
	BgImgUrl  string  `protobuf:"bytes,5,opt,name=BgImgUrl" json:"BgImgUrl,omitempty"`
	Introduce string  `protobuf:"bytes,6,opt,name=Introduce" json:"Introduce,omitempty"`
	Email     string  `protobuf:"bytes,7,opt,name=Email" json:"Email,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto1.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UserInfo) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserInfo) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UserInfo) GetSex() SexType {
	if m != nil {
		return m.Sex
	}
	return SexType_Male
}

func (m *UserInfo) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *UserInfo) GetBgImgUrl() string {
	if m != nil {
		return m.BgImgUrl
	}
	return ""
}

func (m *UserInfo) GetIntroduce() string {
	if m != nil {
		return m.Introduce
	}
	return ""
}

func (m *UserInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type QueryUserInfoRequest struct {
	CommonHeader *CommonHeaderRequest `protobuf:"bytes,1,opt,name=CommonHeader" json:"CommonHeader,omitempty"`
	MobileNo     string               `protobuf:"bytes,2,opt,name=MobileNo" json:"MobileNo,omitempty"`
	UserId       string               `protobuf:"bytes,3,opt,name=UserId" json:"UserId,omitempty"`
}

func (m *QueryUserInfoRequest) Reset()                    { *m = QueryUserInfoRequest{} }
func (m *QueryUserInfoRequest) String() string            { return proto1.CompactTextString(m) }
func (*QueryUserInfoRequest) ProtoMessage()               {}
func (*QueryUserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *QueryUserInfoRequest) GetCommonHeader() *CommonHeaderRequest {
	if m != nil {
		return m.CommonHeader
	}
	return nil
}

func (m *QueryUserInfoRequest) GetMobileNo() string {
	if m != nil {
		return m.MobileNo
	}
	return ""
}

func (m *QueryUserInfoRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type QueryUserInfoResponse struct {
	CommonHeader *CommonHeaderResponse `protobuf:"bytes,1,opt,name=CommonHeader" json:"CommonHeader,omitempty"`
	User         *UserInfo             `protobuf:"bytes,2,opt,name=User" json:"User,omitempty"`
}

func (m *QueryUserInfoResponse) Reset()                    { *m = QueryUserInfoResponse{} }
func (m *QueryUserInfoResponse) String() string            { return proto1.CompactTextString(m) }
func (*QueryUserInfoResponse) ProtoMessage()               {}
func (*QueryUserInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *QueryUserInfoResponse) GetCommonHeader() *CommonHeaderResponse {
	if m != nil {
		return m.CommonHeader
	}
	return nil
}

func (m *QueryUserInfoResponse) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

type VerifyUserLoginByUidPwdRequest struct {
	CommonHeader *CommonHeaderRequest `protobuf:"bytes,1,opt,name=CommonHeader" json:"CommonHeader,omitempty"`
	UserId       string               `protobuf:"bytes,2,opt,name=UserId" json:"UserId,omitempty"`
	Pwd          string               `protobuf:"bytes,3,opt,name=Pwd" json:"Pwd,omitempty"`
}

func (m *VerifyUserLoginByUidPwdRequest) Reset()                    { *m = VerifyUserLoginByUidPwdRequest{} }
func (m *VerifyUserLoginByUidPwdRequest) String() string            { return proto1.CompactTextString(m) }
func (*VerifyUserLoginByUidPwdRequest) ProtoMessage()               {}
func (*VerifyUserLoginByUidPwdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *VerifyUserLoginByUidPwdRequest) GetCommonHeader() *CommonHeaderRequest {
	if m != nil {
		return m.CommonHeader
	}
	return nil
}

func (m *VerifyUserLoginByUidPwdRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *VerifyUserLoginByUidPwdRequest) GetPwd() string {
	if m != nil {
		return m.Pwd
	}
	return ""
}

type VerifyUserLoginByUidPwdResponse struct {
	CommonHeader     *CommonHeaderResponse `protobuf:"bytes,1,opt,name=CommonHeader" json:"CommonHeader,omitempty"`
	VerifyResultFlag int32                 `protobuf:"varint,2,opt,name=VerifyResultFlag" json:"VerifyResultFlag,omitempty"`
	User             *UserInfo             `protobuf:"bytes,3,opt,name=User" json:"User,omitempty"`
}

func (m *VerifyUserLoginByUidPwdResponse) Reset()                    { *m = VerifyUserLoginByUidPwdResponse{} }
func (m *VerifyUserLoginByUidPwdResponse) String() string            { return proto1.CompactTextString(m) }
func (*VerifyUserLoginByUidPwdResponse) ProtoMessage()               {}
func (*VerifyUserLoginByUidPwdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *VerifyUserLoginByUidPwdResponse) GetCommonHeader() *CommonHeaderResponse {
	if m != nil {
		return m.CommonHeader
	}
	return nil
}

func (m *VerifyUserLoginByUidPwdResponse) GetVerifyResultFlag() int32 {
	if m != nil {
		return m.VerifyResultFlag
	}
	return 0
}

func (m *VerifyUserLoginByUidPwdResponse) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

type VerifyUserLoginByMobileSmsRequest struct {
	CommonHeader *CommonHeaderRequest `protobuf:"bytes,1,opt,name=CommonHeader" json:"CommonHeader,omitempty"`
	MobileNo     string               `protobuf:"bytes,2,opt,name=MobileNo" json:"MobileNo,omitempty"`
	SmsCode      string               `protobuf:"bytes,3,opt,name=SmsCode" json:"SmsCode,omitempty"`
}

func (m *VerifyUserLoginByMobileSmsRequest) Reset()         { *m = VerifyUserLoginByMobileSmsRequest{} }
func (m *VerifyUserLoginByMobileSmsRequest) String() string { return proto1.CompactTextString(m) }
func (*VerifyUserLoginByMobileSmsRequest) ProtoMessage()    {}
func (*VerifyUserLoginByMobileSmsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7}
}

func (m *VerifyUserLoginByMobileSmsRequest) GetCommonHeader() *CommonHeaderRequest {
	if m != nil {
		return m.CommonHeader
	}
	return nil
}

func (m *VerifyUserLoginByMobileSmsRequest) GetMobileNo() string {
	if m != nil {
		return m.MobileNo
	}
	return ""
}

func (m *VerifyUserLoginByMobileSmsRequest) GetSmsCode() string {
	if m != nil {
		return m.SmsCode
	}
	return ""
}

type VerifyUserLoginByMobileSmsResponse struct {
	CommonHeader     *CommonHeaderResponse `protobuf:"bytes,1,opt,name=CommonHeader" json:"CommonHeader,omitempty"`
	VerifyResultFlag int32                 `protobuf:"varint,2,opt,name=VerifyResultFlag" json:"VerifyResultFlag,omitempty"`
	User             *UserInfo             `protobuf:"bytes,3,opt,name=User" json:"User,omitempty"`
}

func (m *VerifyUserLoginByMobileSmsResponse) Reset()         { *m = VerifyUserLoginByMobileSmsResponse{} }
func (m *VerifyUserLoginByMobileSmsResponse) String() string { return proto1.CompactTextString(m) }
func (*VerifyUserLoginByMobileSmsResponse) ProtoMessage()    {}
func (*VerifyUserLoginByMobileSmsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{8}
}

func (m *VerifyUserLoginByMobileSmsResponse) GetCommonHeader() *CommonHeaderResponse {
	if m != nil {
		return m.CommonHeader
	}
	return nil
}

func (m *VerifyUserLoginByMobileSmsResponse) GetVerifyResultFlag() int32 {
	if m != nil {
		return m.VerifyResultFlag
	}
	return 0
}

func (m *VerifyUserLoginByMobileSmsResponse) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

// 检测是否已注册   mobile/uid 2选一即可
type CheckUserExistRequest struct {
	CommonHeader *CommonHeaderRequest `protobuf:"bytes,1,opt,name=CommonHeader" json:"CommonHeader,omitempty"`
	MobileNo     string               `protobuf:"bytes,2,opt,name=MobileNo" json:"MobileNo,omitempty"`
	UserId       string               `protobuf:"bytes,3,opt,name=UserId" json:"UserId,omitempty"`
}

func (m *CheckUserExistRequest) Reset()                    { *m = CheckUserExistRequest{} }
func (m *CheckUserExistRequest) String() string            { return proto1.CompactTextString(m) }
func (*CheckUserExistRequest) ProtoMessage()               {}
func (*CheckUserExistRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CheckUserExistRequest) GetCommonHeader() *CommonHeaderRequest {
	if m != nil {
		return m.CommonHeader
	}
	return nil
}

func (m *CheckUserExistRequest) GetMobileNo() string {
	if m != nil {
		return m.MobileNo
	}
	return ""
}

func (m *CheckUserExistRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type CheckUserExistResponse struct {
	CommonHeader *CommonHeaderResponse `protobuf:"bytes,1,opt,name=CommonHeader" json:"CommonHeader,omitempty"`
	ExistFlag    bool                  `protobuf:"varint,2,opt,name=ExistFlag" json:"ExistFlag,omitempty"`
}

func (m *CheckUserExistResponse) Reset()                    { *m = CheckUserExistResponse{} }
func (m *CheckUserExistResponse) String() string            { return proto1.CompactTextString(m) }
func (*CheckUserExistResponse) ProtoMessage()               {}
func (*CheckUserExistResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CheckUserExistResponse) GetCommonHeader() *CommonHeaderResponse {
	if m != nil {
		return m.CommonHeader
	}
	return nil
}

func (m *CheckUserExistResponse) GetExistFlag() bool {
	if m != nil {
		return m.ExistFlag
	}
	return false
}

// 注册新用户
type UserRegisterRequest struct {
	CommonHeader *CommonHeaderRequest `protobuf:"bytes,1,opt,name=CommonHeader" json:"CommonHeader,omitempty"`
	UserId       string               `protobuf:"bytes,2,opt,name=UserId" json:"UserId,omitempty"`
	MobileNo     string               `protobuf:"bytes,3,opt,name=MobileNo" json:"MobileNo,omitempty"`
	Pwd          string               `protobuf:"bytes,4,opt,name=Pwd" json:"Pwd,omitempty"`
	SmsCode      string               `protobuf:"bytes,5,opt,name=SmsCode" json:"SmsCode,omitempty"`
	Email        string               `protobuf:"bytes,6,opt,name=Email" json:"Email,omitempty"`
}

func (m *UserRegisterRequest) Reset()                    { *m = UserRegisterRequest{} }
func (m *UserRegisterRequest) String() string            { return proto1.CompactTextString(m) }
func (*UserRegisterRequest) ProtoMessage()               {}
func (*UserRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UserRegisterRequest) GetCommonHeader() *CommonHeaderRequest {
	if m != nil {
		return m.CommonHeader
	}
	return nil
}

func (m *UserRegisterRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserRegisterRequest) GetMobileNo() string {
	if m != nil {
		return m.MobileNo
	}
	return ""
}

func (m *UserRegisterRequest) GetPwd() string {
	if m != nil {
		return m.Pwd
	}
	return ""
}

func (m *UserRegisterRequest) GetSmsCode() string {
	if m != nil {
		return m.SmsCode
	}
	return ""
}

func (m *UserRegisterRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type UserRegisterResponse struct {
	CommonHeader *CommonHeaderResponse `protobuf:"bytes,1,opt,name=CommonHeader" json:"CommonHeader,omitempty"`
	RegisterFlag bool                  `protobuf:"varint,2,opt,name=RegisterFlag" json:"RegisterFlag,omitempty"`
}

func (m *UserRegisterResponse) Reset()                    { *m = UserRegisterResponse{} }
func (m *UserRegisterResponse) String() string            { return proto1.CompactTextString(m) }
func (*UserRegisterResponse) ProtoMessage()               {}
func (*UserRegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UserRegisterResponse) GetCommonHeader() *CommonHeaderResponse {
	if m != nil {
		return m.CommonHeader
	}
	return nil
}

func (m *UserRegisterResponse) GetRegisterFlag() bool {
	if m != nil {
		return m.RegisterFlag
	}
	return false
}

type GetSmsCodeRequest struct {
	CommonHeader *CommonHeaderRequest `protobuf:"bytes,1,opt,name=CommonHeader" json:"CommonHeader,omitempty"`
	MobileNo     string               `protobuf:"bytes,2,opt,name=MobileNo" json:"MobileNo,omitempty"`
	RandomSeqNo  string               `protobuf:"bytes,3,opt,name=RandomSeqNo" json:"RandomSeqNo,omitempty"`
	SmsType      SmsCodeType          `protobuf:"varint,4,opt,name=SmsType,enum=proto.SmsCodeType" json:"SmsType,omitempty"`
}

func (m *GetSmsCodeRequest) Reset()                    { *m = GetSmsCodeRequest{} }
func (m *GetSmsCodeRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetSmsCodeRequest) ProtoMessage()               {}
func (*GetSmsCodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetSmsCodeRequest) GetCommonHeader() *CommonHeaderRequest {
	if m != nil {
		return m.CommonHeader
	}
	return nil
}

func (m *GetSmsCodeRequest) GetMobileNo() string {
	if m != nil {
		return m.MobileNo
	}
	return ""
}

func (m *GetSmsCodeRequest) GetRandomSeqNo() string {
	if m != nil {
		return m.RandomSeqNo
	}
	return ""
}

func (m *GetSmsCodeRequest) GetSmsType() SmsCodeType {
	if m != nil {
		return m.SmsType
	}
	return SmsCodeType_RegisterNewUser
}

type GetSmsCodeResponse struct {
	CommonHeader *CommonHeaderResponse `protobuf:"bytes,1,opt,name=CommonHeader" json:"CommonHeader,omitempty"`
}

func (m *GetSmsCodeResponse) Reset()                    { *m = GetSmsCodeResponse{} }
func (m *GetSmsCodeResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetSmsCodeResponse) ProtoMessage()               {}
func (*GetSmsCodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetSmsCodeResponse) GetCommonHeader() *CommonHeaderResponse {
	if m != nil {
		return m.CommonHeader
	}
	return nil
}

type SearchOtherPersonsRequest struct {
	CommonHeader *CommonHeaderRequest `protobuf:"bytes,1,opt,name=CommonHeader" json:"CommonHeader,omitempty"`
	KeyType      SearchPersonKeyType  `protobuf:"varint,2,opt,name=KeyType,enum=proto.SearchPersonKeyType" json:"KeyType,omitempty"`
	SearchKey    string               `protobuf:"bytes,3,opt,name=SearchKey" json:"SearchKey,omitempty"`
}

func (m *SearchOtherPersonsRequest) Reset()                    { *m = SearchOtherPersonsRequest{} }
func (m *SearchOtherPersonsRequest) String() string            { return proto1.CompactTextString(m) }
func (*SearchOtherPersonsRequest) ProtoMessage()               {}
func (*SearchOtherPersonsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *SearchOtherPersonsRequest) GetCommonHeader() *CommonHeaderRequest {
	if m != nil {
		return m.CommonHeader
	}
	return nil
}

func (m *SearchOtherPersonsRequest) GetKeyType() SearchPersonKeyType {
	if m != nil {
		return m.KeyType
	}
	return SearchPersonKeyType_ByUserId
}

func (m *SearchOtherPersonsRequest) GetSearchKey() string {
	if m != nil {
		return m.SearchKey
	}
	return ""
}

type SearchOtherPersonsResponse struct {
	CommonHeader *CommonHeaderResponse `protobuf:"bytes,1,opt,name=CommonHeader" json:"CommonHeader,omitempty"`
	UserCount    int32                 `protobuf:"varint,2,opt,name=UserCount" json:"UserCount,omitempty"`
	Users        []*UserInfo           `protobuf:"bytes,3,rep,name=Users" json:"Users,omitempty"`
}

func (m *SearchOtherPersonsResponse) Reset()                    { *m = SearchOtherPersonsResponse{} }
func (m *SearchOtherPersonsResponse) String() string            { return proto1.CompactTextString(m) }
func (*SearchOtherPersonsResponse) ProtoMessage()               {}
func (*SearchOtherPersonsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *SearchOtherPersonsResponse) GetCommonHeader() *CommonHeaderResponse {
	if m != nil {
		return m.CommonHeader
	}
	return nil
}

func (m *SearchOtherPersonsResponse) GetUserCount() int32 {
	if m != nil {
		return m.UserCount
	}
	return 0
}

func (m *SearchOtherPersonsResponse) GetUsers() []*UserInfo {
	if m != nil {
		return m.Users
	}
	return nil
}

// 添加好友
type SendMakeFriendRequest struct {
	CommonHeader *CommonHeaderRequest `protobuf:"bytes,1,opt,name=CommonHeader" json:"CommonHeader,omitempty"`
	FromUserId   string               `protobuf:"bytes,2,opt,name=FromUserId" json:"FromUserId,omitempty"`
	ToUserId     string               `protobuf:"bytes,3,opt,name=ToUserId" json:"ToUserId,omitempty"`
	HelloMsg     string               `protobuf:"bytes,4,opt,name=HelloMsg" json:"HelloMsg,omitempty"`
}

func (m *SendMakeFriendRequest) Reset()                    { *m = SendMakeFriendRequest{} }
func (m *SendMakeFriendRequest) String() string            { return proto1.CompactTextString(m) }
func (*SendMakeFriendRequest) ProtoMessage()               {}
func (*SendMakeFriendRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *SendMakeFriendRequest) GetCommonHeader() *CommonHeaderRequest {
	if m != nil {
		return m.CommonHeader
	}
	return nil
}

func (m *SendMakeFriendRequest) GetFromUserId() string {
	if m != nil {
		return m.FromUserId
	}
	return ""
}

func (m *SendMakeFriendRequest) GetToUserId() string {
	if m != nil {
		return m.ToUserId
	}
	return ""
}

func (m *SendMakeFriendRequest) GetHelloMsg() string {
	if m != nil {
		return m.HelloMsg
	}
	return ""
}

type SendMakeFriendResponse struct {
	CommonHeader *CommonHeaderResponse `protobuf:"bytes,1,opt,name=CommonHeader" json:"CommonHeader,omitempty"`
	SendFlag     int32                 `protobuf:"varint,2,opt,name=SendFlag" json:"SendFlag,omitempty"`
}

func (m *SendMakeFriendResponse) Reset()                    { *m = SendMakeFriendResponse{} }
func (m *SendMakeFriendResponse) String() string            { return proto1.CompactTextString(m) }
func (*SendMakeFriendResponse) ProtoMessage()               {}
func (*SendMakeFriendResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *SendMakeFriendResponse) GetCommonHeader() *CommonHeaderResponse {
	if m != nil {
		return m.CommonHeader
	}
	return nil
}

func (m *SendMakeFriendResponse) GetSendFlag() int32 {
	if m != nil {
		return m.SendFlag
	}
	return 0
}

type MessageDetail struct {
	MsgLen       int32  `protobuf:"varint,1,opt,name=MsgLen" json:"MsgLen,omitempty"`
	MsgVerifyNum string `protobuf:"bytes,2,opt,name=MsgVerifyNum" json:"MsgVerifyNum,omitempty"`
	MsgContent   []byte `protobuf:"bytes,3,opt,name=MsgContent,proto3" json:"MsgContent,omitempty"`
}

func (m *MessageDetail) Reset()                    { *m = MessageDetail{} }
func (m *MessageDetail) String() string            { return proto1.CompactTextString(m) }
func (*MessageDetail) ProtoMessage()               {}
func (*MessageDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *MessageDetail) GetMsgLen() int32 {
	if m != nil {
		return m.MsgLen
	}
	return 0
}

func (m *MessageDetail) GetMsgVerifyNum() string {
	if m != nil {
		return m.MsgVerifyNum
	}
	return ""
}

func (m *MessageDetail) GetMsgContent() []byte {
	if m != nil {
		return m.MsgContent
	}
	return nil
}

type SendMsgRequest struct {
	CommonHeader *CommonHeaderRequest `protobuf:"bytes,1,opt,name=CommonHeader" json:"CommonHeader,omitempty"`
	MsgType      MessageType          `protobuf:"varint,2,opt,name=MsgType,enum=proto.MessageType" json:"MsgType,omitempty"`
	SendUserId   string               `protobuf:"bytes,3,opt,name=SendUserId" json:"SendUserId,omitempty"`
	RecvUserId   string               `protobuf:"bytes,4,opt,name=RecvUserId" json:"RecvUserId,omitempty"`
	MsgData      []*MessageDetail     `protobuf:"bytes,5,rep,name=MsgData" json:"MsgData,omitempty"`
}

func (m *SendMsgRequest) Reset()                    { *m = SendMsgRequest{} }
func (m *SendMsgRequest) String() string            { return proto1.CompactTextString(m) }
func (*SendMsgRequest) ProtoMessage()               {}
func (*SendMsgRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *SendMsgRequest) GetCommonHeader() *CommonHeaderRequest {
	if m != nil {
		return m.CommonHeader
	}
	return nil
}

func (m *SendMsgRequest) GetMsgType() MessageType {
	if m != nil {
		return m.MsgType
	}
	return MessageType_PureTextMsg
}

func (m *SendMsgRequest) GetSendUserId() string {
	if m != nil {
		return m.SendUserId
	}
	return ""
}

func (m *SendMsgRequest) GetRecvUserId() string {
	if m != nil {
		return m.RecvUserId
	}
	return ""
}

func (m *SendMsgRequest) GetMsgData() []*MessageDetail {
	if m != nil {
		return m.MsgData
	}
	return nil
}

type SendMsgResponse struct {
	CommonHeader *CommonHeaderResponse `protobuf:"bytes,1,opt,name=CommonHeader" json:"CommonHeader,omitempty"`
	MsgStatus    int32                 `protobuf:"varint,2,opt,name=MsgStatus" json:"MsgStatus,omitempty"`
}

func (m *SendMsgResponse) Reset()                    { *m = SendMsgResponse{} }
func (m *SendMsgResponse) String() string            { return proto1.CompactTextString(m) }
func (*SendMsgResponse) ProtoMessage()               {}
func (*SendMsgResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *SendMsgResponse) GetCommonHeader() *CommonHeaderResponse {
	if m != nil {
		return m.CommonHeader
	}
	return nil
}

func (m *SendMsgResponse) GetMsgStatus() int32 {
	if m != nil {
		return m.MsgStatus
	}
	return 0
}

type LogoutRequest struct {
	CommonHeader *CommonHeaderRequest `protobuf:"bytes,1,opt,name=CommonHeader" json:"CommonHeader,omitempty"`
	UserId       string               `protobuf:"bytes,2,opt,name=UserId" json:"UserId,omitempty"`
}

func (m *LogoutRequest) Reset()                    { *m = LogoutRequest{} }
func (m *LogoutRequest) String() string            { return proto1.CompactTextString(m) }
func (*LogoutRequest) ProtoMessage()               {}
func (*LogoutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *LogoutRequest) GetCommonHeader() *CommonHeaderRequest {
	if m != nil {
		return m.CommonHeader
	}
	return nil
}

func (m *LogoutRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type LogoutResponse struct {
	CommonHeader *CommonHeaderResponse `protobuf:"bytes,1,opt,name=CommonHeader" json:"CommonHeader,omitempty"`
}

func (m *LogoutResponse) Reset()                    { *m = LogoutResponse{} }
func (m *LogoutResponse) String() string            { return proto1.CompactTextString(m) }
func (*LogoutResponse) ProtoMessage()               {}
func (*LogoutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *LogoutResponse) GetCommonHeader() *CommonHeaderResponse {
	if m != nil {
		return m.CommonHeader
	}
	return nil
}

func init() {
	proto1.RegisterType((*CommonHeaderRequest)(nil), "proto.CommonHeaderRequest")
	proto1.RegisterType((*CommonHeaderResponse)(nil), "proto.CommonHeaderResponse")
	proto1.RegisterType((*UserInfo)(nil), "proto.UserInfo")
	proto1.RegisterType((*QueryUserInfoRequest)(nil), "proto.QueryUserInfoRequest")
	proto1.RegisterType((*QueryUserInfoResponse)(nil), "proto.QueryUserInfoResponse")
	proto1.RegisterType((*VerifyUserLoginByUidPwdRequest)(nil), "proto.VerifyUserLoginByUidPwdRequest")
	proto1.RegisterType((*VerifyUserLoginByUidPwdResponse)(nil), "proto.VerifyUserLoginByUidPwdResponse")
	proto1.RegisterType((*VerifyUserLoginByMobileSmsRequest)(nil), "proto.VerifyUserLoginByMobileSmsRequest")
	proto1.RegisterType((*VerifyUserLoginByMobileSmsResponse)(nil), "proto.VerifyUserLoginByMobileSmsResponse")
	proto1.RegisterType((*CheckUserExistRequest)(nil), "proto.CheckUserExistRequest")
	proto1.RegisterType((*CheckUserExistResponse)(nil), "proto.CheckUserExistResponse")
	proto1.RegisterType((*UserRegisterRequest)(nil), "proto.UserRegisterRequest")
	proto1.RegisterType((*UserRegisterResponse)(nil), "proto.UserRegisterResponse")
	proto1.RegisterType((*GetSmsCodeRequest)(nil), "proto.GetSmsCodeRequest")
	proto1.RegisterType((*GetSmsCodeResponse)(nil), "proto.GetSmsCodeResponse")
	proto1.RegisterType((*SearchOtherPersonsRequest)(nil), "proto.SearchOtherPersonsRequest")
	proto1.RegisterType((*SearchOtherPersonsResponse)(nil), "proto.SearchOtherPersonsResponse")
	proto1.RegisterType((*SendMakeFriendRequest)(nil), "proto.SendMakeFriendRequest")
	proto1.RegisterType((*SendMakeFriendResponse)(nil), "proto.SendMakeFriendResponse")
	proto1.RegisterType((*MessageDetail)(nil), "proto.MessageDetail")
	proto1.RegisterType((*SendMsgRequest)(nil), "proto.SendMsgRequest")
	proto1.RegisterType((*SendMsgResponse)(nil), "proto.SendMsgResponse")
	proto1.RegisterType((*LogoutRequest)(nil), "proto.LogoutRequest")
	proto1.RegisterType((*LogoutResponse)(nil), "proto.LogoutResponse")
	proto1.RegisterEnum("proto.SexType", SexType_name, SexType_value)
	proto1.RegisterEnum("proto.SmsCodeType", SmsCodeType_name, SmsCodeType_value)
	proto1.RegisterEnum("proto.SearchPersonKeyType", SearchPersonKeyType_name, SearchPersonKeyType_value)
	proto1.RegisterEnum("proto.MessageType", MessageType_name, MessageType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Login service

type LoginClient interface {
	// 登录校验 通过用户名密码
	VerifyLogin(ctx context.Context, in *VerifyUserLoginByUidPwdRequest, opts ...grpc.CallOption) (*VerifyUserLoginByUidPwdResponse, error)
	// 登录校验 通过手机短信
	VerifyLoginBySms(ctx context.Context, in *VerifyUserLoginByMobileSmsRequest, opts ...grpc.CallOption) (*VerifyUserLoginByMobileSmsResponse, error)
}

type loginClient struct {
	cc *grpc.ClientConn
}

func NewLoginClient(cc *grpc.ClientConn) LoginClient {
	return &loginClient{cc}
}

func (c *loginClient) VerifyLogin(ctx context.Context, in *VerifyUserLoginByUidPwdRequest, opts ...grpc.CallOption) (*VerifyUserLoginByUidPwdResponse, error) {
	out := new(VerifyUserLoginByUidPwdResponse)
	err := grpc.Invoke(ctx, "/proto.Login/VerifyLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginClient) VerifyLoginBySms(ctx context.Context, in *VerifyUserLoginByMobileSmsRequest, opts ...grpc.CallOption) (*VerifyUserLoginByMobileSmsResponse, error) {
	out := new(VerifyUserLoginByMobileSmsResponse)
	err := grpc.Invoke(ctx, "/proto.Login/VerifyLoginBySms", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Login service

type LoginServer interface {
	// 登录校验 通过用户名密码
	VerifyLogin(context.Context, *VerifyUserLoginByUidPwdRequest) (*VerifyUserLoginByUidPwdResponse, error)
	// 登录校验 通过手机短信
	VerifyLoginBySms(context.Context, *VerifyUserLoginByMobileSmsRequest) (*VerifyUserLoginByMobileSmsResponse, error)
}

func RegisterLoginServer(s *grpc.Server, srv LoginServer) {
	s.RegisterService(&_Login_serviceDesc, srv)
}

func _Login_VerifyLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyUserLoginByUidPwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).VerifyLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Login/VerifyLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).VerifyLogin(ctx, req.(*VerifyUserLoginByUidPwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Login_VerifyLoginBySms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyUserLoginByMobileSmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).VerifyLoginBySms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Login/VerifyLoginBySms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).VerifyLoginBySms(ctx, req.(*VerifyUserLoginByMobileSmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Login_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Login",
	HandlerType: (*LoginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyLogin",
			Handler:    _Login_VerifyLogin_Handler,
		},
		{
			MethodName: "VerifyLoginBySms",
			Handler:    _Login_VerifyLoginBySms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat_proto3.proto",
}

// Client API for Regist service

type RegistClient interface {
	// 注册
	Register(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error)
	// 检测是否已存在
	IsExist(ctx context.Context, in *CheckUserExistRequest, opts ...grpc.CallOption) (*CheckUserExistResponse, error)
}

type registClient struct {
	cc *grpc.ClientConn
}

func NewRegistClient(cc *grpc.ClientConn) RegistClient {
	return &registClient{cc}
}

func (c *registClient) Register(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error) {
	out := new(UserRegisterResponse)
	err := grpc.Invoke(ctx, "/proto.Regist/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registClient) IsExist(ctx context.Context, in *CheckUserExistRequest, opts ...grpc.CallOption) (*CheckUserExistResponse, error) {
	out := new(CheckUserExistResponse)
	err := grpc.Invoke(ctx, "/proto.Regist/IsExist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Regist service

type RegistServer interface {
	// 注册
	Register(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
	// 检测是否已存在
	IsExist(context.Context, *CheckUserExistRequest) (*CheckUserExistResponse, error)
}

func RegisterRegistServer(s *grpc.Server, srv RegistServer) {
	s.RegisterService(&_Regist_serviceDesc, srv)
}

func _Regist_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Regist/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistServer).Register(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Regist_IsExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistServer).IsExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Regist/IsExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistServer).IsExist(ctx, req.(*CheckUserExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Regist_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Regist",
	HandlerType: (*RegistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Regist_Register_Handler,
		},
		{
			MethodName: "IsExist",
			Handler:    _Regist_IsExist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat_proto3.proto",
}

// Client API for Chat service

type ChatClient interface {
	// 搜索朋友
	SearchFriend(ctx context.Context, in *SearchOtherPersonsRequest, opts ...grpc.CallOption) (*SearchOtherPersonsResponse, error)
	// 添加好友
	AddFriend(ctx context.Context, in *SendMakeFriendRequest, opts ...grpc.CallOption) (*SendMakeFriendResponse, error)
	// 发送消息
	SendMsg(ctx context.Context, opts ...grpc.CallOption) (Chat_SendMsgClient, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) SearchFriend(ctx context.Context, in *SearchOtherPersonsRequest, opts ...grpc.CallOption) (*SearchOtherPersonsResponse, error) {
	out := new(SearchOtherPersonsResponse)
	err := grpc.Invoke(ctx, "/proto.Chat/SearchFriend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) AddFriend(ctx context.Context, in *SendMakeFriendRequest, opts ...grpc.CallOption) (*SendMakeFriendResponse, error) {
	out := new(SendMakeFriendResponse)
	err := grpc.Invoke(ctx, "/proto.Chat/AddFriend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SendMsg(ctx context.Context, opts ...grpc.CallOption) (Chat_SendMsgClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Chat_serviceDesc.Streams[0], c.cc, "/proto.Chat/SendMsg", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatSendMsgClient{stream}
	return x, nil
}

type Chat_SendMsgClient interface {
	Send(*SendMsgRequest) error
	Recv() (*SendMsgResponse, error)
	grpc.ClientStream
}

type chatSendMsgClient struct {
	grpc.ClientStream
}

func (x *chatSendMsgClient) Send(m *SendMsgRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatSendMsgClient) Recv() (*SendMsgResponse, error) {
	m := new(SendMsgResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Chat service

type ChatServer interface {
	// 搜索朋友
	SearchFriend(context.Context, *SearchOtherPersonsRequest) (*SearchOtherPersonsResponse, error)
	// 添加好友
	AddFriend(context.Context, *SendMakeFriendRequest) (*SendMakeFriendResponse, error)
	// 发送消息
	SendMsg(Chat_SendMsgServer) error
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_SearchFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOtherPersonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SearchFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Chat/SearchFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SearchFriend(ctx, req.(*SearchOtherPersonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMakeFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Chat/AddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).AddFriend(ctx, req.(*SendMakeFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SendMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).SendMsg(&chatSendMsgServer{stream})
}

type Chat_SendMsgServer interface {
	Send(*SendMsgResponse) error
	Recv() (*SendMsgRequest, error)
	grpc.ServerStream
}

type chatSendMsgServer struct {
	grpc.ServerStream
}

func (x *chatSendMsgServer) Send(m *SendMsgResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatSendMsgServer) Recv() (*SendMsgRequest, error) {
	m := new(SendMsgRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchFriend",
			Handler:    _Chat_SearchFriend_Handler,
		},
		{
			MethodName: "AddFriend",
			Handler:    _Chat_AddFriend_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMsg",
			Handler:       _Chat_SendMsg_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat_proto3.proto",
}

// Client API for Query service

type QueryClient interface {
	// 查询用户信息
	QueryUser(ctx context.Context, in *QueryUserInfoRequest, opts ...grpc.CallOption) (*QueryUserInfoResponse, error)
	// 获取短信验证码
	GetSmsCode(ctx context.Context, in *GetSmsCodeRequest, opts ...grpc.CallOption) (*GetSmsCodeResponse, error)
}

type queryClient struct {
	cc *grpc.ClientConn
}

func NewQueryClient(cc *grpc.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryUser(ctx context.Context, in *QueryUserInfoRequest, opts ...grpc.CallOption) (*QueryUserInfoResponse, error) {
	out := new(QueryUserInfoResponse)
	err := grpc.Invoke(ctx, "/proto.Query/QueryUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSmsCode(ctx context.Context, in *GetSmsCodeRequest, opts ...grpc.CallOption) (*GetSmsCodeResponse, error) {
	out := new(GetSmsCodeResponse)
	err := grpc.Invoke(ctx, "/proto.Query/GetSmsCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Query service

type QueryServer interface {
	// 查询用户信息
	QueryUser(context.Context, *QueryUserInfoRequest) (*QueryUserInfoResponse, error)
	// 获取短信验证码
	GetSmsCode(context.Context, *GetSmsCodeRequest) (*GetSmsCodeResponse, error)
}

func RegisterQueryServer(s *grpc.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Query/QueryUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryUser(ctx, req.(*QueryUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSmsCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmsCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSmsCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Query/GetSmsCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSmsCode(ctx, req.(*GetSmsCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryUser",
			Handler:    _Query_QueryUser_Handler,
		},
		{
			MethodName: "GetSmsCode",
			Handler:    _Query_GetSmsCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat_proto3.proto",
}

func init() { proto1.RegisterFile("chat_proto3.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4b, 0x6f, 0xdb, 0xd6,
	0x12, 0xf6, 0x91, 0x44, 0x3d, 0x46, 0x8e, 0xcd, 0x1c, 0x3f, 0xa0, 0x30, 0xbe, 0x89, 0xc2, 0x7b,
	0x73, 0xe1, 0x6b, 0x04, 0xc6, 0x85, 0xdb, 0x55, 0x17, 0x29, 0x6c, 0x27, 0xaa, 0xd5, 0x44, 0x8e,
	0x43, 0xd9, 0x59, 0x74, 0xd1, 0x82, 0x11, 0x27, 0x14, 0x1b, 0x91, 0xb4, 0x79, 0x28, 0x3f, 0x50,
	0x14, 0x45, 0xb7, 0xed, 0xbe, 0x40, 0xb6, 0xfd, 0x03, 0x5d, 0x14, 0xe8, 0xb6, 0x3f, 0xa0, 0x40,
	0x17, 0xfd, 0x17, 0xdd, 0x74, 0xd9, 0x75, 0x71, 0x1e, 0xa4, 0x48, 0x85, 0x71, 0x0b, 0x44, 0x49,
	0xbb, 0x12, 0x67, 0xe6, 0x3c, 0xbe, 0xf9, 0xce, 0xcc, 0x99, 0x39, 0x82, 0xab, 0x83, 0xa1, 0x1d,
	0x7f, 0x72, 0x1c, 0x85, 0x71, 0xf8, 0xce, 0xa6, 0xf8, 0xa1, 0x9a, 0xf8, 0x31, 0xbf, 0x2c, 0xc1,
	0xd2, 0x6e, 0xe8, 0xfb, 0x61, 0xb0, 0x87, 0xb6, 0x83, 0x91, 0x85, 0x27, 0x63, 0x64, 0x31, 0x5d,
	0x83, 0xc6, 0x13, 0x8c, 0x98, 0x17, 0x06, 0xfb, 0x61, 0x8b, 0xb4, 0xc9, 0x7a, 0xc3, 0x9a, 0x28,
	0xa8, 0x01, 0x75, 0x0b, 0x4f, 0xfa, 0x78, 0xb2, 0x1f, 0xb6, 0x4a, 0x6d, 0xb2, 0x5e, 0xb6, 0x52,
	0x99, 0xb6, 0xa0, 0x66, 0xe1, 0xc9, 0xa1, 0xe7, 0x63, 0xab, 0x2c, 0xe6, 0x25, 0x22, 0x5d, 0x85,
	0x6a, 0xf7, 0x78, 0xdb, 0x71, 0xa2, 0x56, 0x45, 0x18, 0x94, 0x44, 0x6f, 0x00, 0xdc, 0xc3, 0x53,
	0x6f, 0x80, 0x87, 0x17, 0xc7, 0xd8, 0xd2, 0xda, 0x64, 0x5d, 0xb3, 0x32, 0x1a, 0x6a, 0xc2, 0xbc,
	0x94, 0x1e, 0xb1, 0x6e, 0xf0, 0x2c, 0x6c, 0x55, 0xc5, 0xec, 0x9c, 0x8e, 0xe3, 0x3d, 0x8c, 0xec,
	0x80, 0xed, 0x86, 0x0e, 0xb6, 0x6a, 0x12, 0x6f, 0xaa, 0xe0, 0xd6, 0x3e, 0x32, 0x0e, 0xbe, 0xeb,
	0xb4, 0xea, 0xd2, 0x9a, 0x2a, 0xcc, 0xdf, 0x09, 0x2c, 0xe7, 0x39, 0x60, 0xc7, 0x61, 0xc0, 0xf0,
	0x35, 0x48, 0x10, 0x36, 0x26, 0x6d, 0xe5, 0xc4, 0xc6, 0x32, 0x04, 0x31, 0x41, 0x50, 0x25, 0x21,
	0x48, 0x88, 0xdc, 0xd2, 0x63, 0xae, 0x70, 0x41, 0x93, 0x16, 0x25, 0x2a, 0x4b, 0xc6, 0xfb, 0x44,
	0x7c, 0x2d, 0xc7, 0x7f, 0x26, 0x50, 0x3f, 0x62, 0x18, 0x89, 0x85, 0x56, 0xa1, 0x2a, 0xbe, 0x1d,
	0xe5, 0xa9, 0x92, 0xb8, 0x2b, 0xfc, 0x6b, 0xdf, 0xf6, 0x51, 0xb8, 0xd9, 0xb0, 0x52, 0x99, 0xb6,
	0xa1, 0xdc, 0xc7, 0x73, 0xe1, 0xe1, 0xc2, 0xd6, 0x82, 0x8c, 0xac, 0xcd, 0x3e, 0x9e, 0xf3, 0x63,
	0xb3, 0xb8, 0x89, 0x03, 0xd8, 0x3e, 0xb5, 0x63, 0x3b, 0x3a, 0x8a, 0x46, 0xca, 0xdd, 0x89, 0x82,
	0xaf, 0xbd, 0xe3, 0x76, 0x7d, 0x97, 0x1b, 0xa5, 0xc7, 0xa9, 0xcc, 0x67, 0x76, 0x83, 0x38, 0x0a,
	0x9d, 0xf1, 0x00, 0x95, 0xd3, 0x13, 0x05, 0x5d, 0x06, 0xed, 0xbe, 0x6f, 0x7b, 0x23, 0xe5, 0xb2,
	0x14, 0xcc, 0xaf, 0x08, 0x2c, 0x3f, 0x1e, 0x63, 0x74, 0x91, 0x78, 0x95, 0x84, 0xf3, 0x5d, 0x98,
	0xcf, 0x9e, 0xb0, 0x70, 0xb1, 0xb9, 0x65, 0x28, 0xc4, 0x05, 0x09, 0x60, 0xe5, 0xc6, 0x73, 0xa0,
	0xbd, 0xf0, 0xa9, 0x37, 0x42, 0x75, 0xd6, 0x0d, 0x2b, 0x95, 0x33, 0xc4, 0x95, 0xb3, 0xc4, 0x99,
	0x9f, 0xc3, 0xca, 0x14, 0x16, 0x15, 0x56, 0xef, 0x17, 0x82, 0xb9, 0x5e, 0x08, 0x46, 0x4e, 0x99,
	0x42, 0xf3, 0x6f, 0xa8, 0xf0, 0x45, 0x05, 0x92, 0xe6, 0xd6, 0xa2, 0x9a, 0x98, 0xee, 0x23, 0x8c,
	0x9c, 0x8b, 0x1b, 0x4f, 0x30, 0xf2, 0x9e, 0x09, 0x00, 0x0f, 0x43, 0xd7, 0x0b, 0x76, 0x2e, 0x8e,
	0x3c, 0xe7, 0xe0, 0xcc, 0x99, 0x15, 0x2b, 0x13, 0xcf, 0x4b, 0xb9, 0x90, 0xd1, 0xa1, 0x7c, 0x70,
	0x96, 0xd0, 0xc1, 0x3f, 0xcd, 0xef, 0x09, 0xdc, 0x7c, 0x25, 0x98, 0x59, 0xd1, 0xb2, 0x01, 0xba,
	0xdc, 0xc3, 0x42, 0x36, 0x1e, 0xc5, 0x9d, 0x91, 0xed, 0x0a, 0x60, 0x9a, 0xf5, 0x92, 0x3e, 0xa5,
	0xb0, 0x7c, 0x19, 0x85, 0x2f, 0x08, 0xdc, 0x7a, 0x09, 0xb5, 0x3c, 0xf7, 0xbe, 0xcf, 0xde, 0x46,
	0x6c, 0xb5, 0xa0, 0xd6, 0xf7, 0x65, 0x6e, 0xab, 0xcb, 0x54, 0x89, 0xe6, 0x0f, 0x04, 0xcc, 0xcb,
	0xb0, 0xfd, 0x63, 0x49, 0xfd, 0x9a, 0xc0, 0xca, 0xee, 0x10, 0x07, 0xcf, 0xb9, 0x74, 0xff, 0xdc,
	0x63, 0xf1, 0xdf, 0x99, 0xa4, 0x67, 0xb0, 0x3a, 0x0d, 0x66, 0x56, 0xcc, 0xad, 0x41, 0x43, 0xac,
	0x98, 0x52, 0x56, 0xb7, 0x26, 0x0a, 0xf3, 0x27, 0x02, 0x4b, 0x7c, 0x53, 0x0b, 0x5d, 0x8f, 0xc5,
	0x93, 0xc2, 0xfb, 0xa6, 0x72, 0x32, 0x4b, 0x4e, 0x79, 0x8a, 0x1c, 0x95, 0xaf, 0x95, 0x34, 0x5f,
	0xb3, 0x71, 0xa7, 0xe5, 0xe2, 0x6e, 0x72, 0xf1, 0x56, 0xb3, 0x17, 0xef, 0x67, 0xb0, 0x9c, 0x77,
	0x66, 0x56, 0x24, 0x9a, 0x30, 0x9f, 0x2c, 0x9a, 0xe1, 0x31, 0xa7, 0x33, 0x7f, 0x24, 0x70, 0xf5,
	0x03, 0x8c, 0x15, 0xc2, 0xb7, 0x11, 0x4d, 0x6d, 0x68, 0x5a, 0x76, 0xe0, 0x84, 0xfe, 0xa4, 0xc2,
	0x37, 0xac, 0xac, 0x8a, 0xde, 0x11, 0x04, 0x8a, 0x86, 0xa6, 0x22, 0xaa, 0x23, 0x4d, 0xaa, 0xa3,
	0x44, 0x29, 0x2a, 0x64, 0x32, 0xc4, 0x3c, 0x02, 0x9a, 0x75, 0x60, 0x46, 0xe4, 0x99, 0xdf, 0x11,
	0xb8, 0xd6, 0x47, 0x3b, 0x1a, 0x0c, 0x1f, 0xc5, 0x43, 0x8c, 0x0e, 0x30, 0x62, 0x61, 0x30, 0xb3,
	0x7b, 0xeb, 0x5d, 0xa8, 0x3d, 0xc0, 0x0b, 0xe1, 0x62, 0x49, 0xb8, 0x68, 0xa4, 0x0d, 0x00, 0xdf,
	0x52, 0xee, 0xa6, 0x46, 0x58, 0xc9, 0x50, 0xd9, 0x91, 0x70, 0xfb, 0x03, 0xbc, 0x50, 0xc4, 0x4d,
	0x14, 0xe6, 0xb7, 0x04, 0x8c, 0x22, 0xc4, 0x33, 0xcc, 0x49, 0x1e, 0xa7, 0xbb, 0xe1, 0x38, 0x88,
	0xd5, 0x35, 0x36, 0x51, 0xd0, 0xdb, 0xa0, 0x71, 0x81, 0xb5, 0xca, 0xed, 0x72, 0xd1, 0x05, 0x26,
	0xad, 0x9c, 0xd6, 0x95, 0x3e, 0x06, 0x4e, 0xcf, 0x7e, 0x8e, 0x9d, 0xc8, 0xc3, 0x60, 0x66, 0x05,
	0xf5, 0x06, 0x40, 0x27, 0x0a, 0xfd, 0x5c, 0x02, 0x67, 0x34, 0x3c, 0x26, 0x0f, 0xc3, 0xdc, 0x3d,
	0x96, 0xca, 0xdc, 0xb6, 0x87, 0xa3, 0x51, 0xd8, 0x63, 0xae, 0xca, 0xe4, 0x54, 0x36, 0xc7, 0xb0,
	0x3a, 0x0d, 0x78, 0x56, 0x8c, 0x1a, 0x50, 0xe7, 0x4b, 0x67, 0xea, 0x42, 0x2a, 0x9b, 0xcf, 0xe1,
	0x4a, 0x0f, 0x19, 0xb3, 0x5d, 0xbc, 0x87, 0xb1, 0xed, 0x8d, 0xf8, 0xe5, 0xd4, 0x63, 0xee, 0x43,
	0x0c, 0xc4, 0x3e, 0x9a, 0xa5, 0x24, 0x9e, 0xe5, 0x3d, 0xe6, 0xca, 0x7a, 0xb2, 0x3f, 0xf6, 0x95,
	0xe7, 0x39, 0x1d, 0xe7, 0x46, 0x74, 0xc3, 0x41, 0x8c, 0x41, 0x2c, 0xbc, 0x9f, 0xb7, 0x32, 0x1a,
	0xf3, 0x37, 0x02, 0x0b, 0xc2, 0x49, 0xe6, 0xce, 0xea, 0x38, 0xee, 0x88, 0xae, 0x3b, 0x13, 0xe1,
	0x49, 0x12, 0x2b, 0xaf, 0x64, 0x64, 0xab, 0x21, 0x1c, 0x20, 0xdf, 0x3f, 0x77, 0x3c, 0x19, 0x0d,
	0xb7, 0x5b, 0x38, 0x38, 0x55, 0x76, 0x79, 0x44, 0x19, 0x0d, 0xdd, 0x14, 0xbb, 0xdd, 0xb3, 0x63,
	0xbb, 0xa5, 0x89, 0xf8, 0x5b, 0xce, 0xef, 0x26, 0x39, 0xb4, 0x92, 0x41, 0xe6, 0x31, 0x2c, 0xa6,
	0xfe, 0xce, 0x30, 0x3f, 0x7a, 0xcc, 0xed, 0xc7, 0x76, 0x3c, 0x66, 0x49, 0x7e, 0xa4, 0x0a, 0xd3,
	0x85, 0x2b, 0x0f, 0x43, 0x37, 0x1c, 0xc7, 0x6f, 0xb8, 0x58, 0x99, 0x8f, 0x61, 0x21, 0xd9, 0x68,
	0x46, 0x9e, 0x6d, 0xdc, 0x84, 0x9a, 0x7a, 0x98, 0xd0, 0x3a, 0x54, 0x7a, 0xf6, 0x08, 0xf5, 0x39,
	0x0a, 0x50, 0xed, 0xa0, 0xcf, 0xbf, 0xc9, 0xc6, 0x3e, 0x34, 0x33, 0x77, 0x33, 0x5d, 0x82, 0xc5,
	0xa4, 0xc8, 0xec, 0xe3, 0x19, 0xc7, 0xa5, 0xcf, 0xd1, 0x65, 0xd0, 0x3b, 0x61, 0xe4, 0x62, 0xbc,
	0x1d, 0x38, 0x1d, 0x2f, 0xe0, 0xed, 0xab, 0x4e, 0xb8, 0x76, 0xba, 0xff, 0xd2, 0x4b, 0x1b, 0x5f,
	0xc0, 0x52, 0xc1, 0x45, 0x48, 0xe7, 0xa1, 0xbe, 0x23, 0x9f, 0x04, 0x8e, 0x3e, 0x47, 0x17, 0x00,
	0xa4, 0xc4, 0x9f, 0x53, 0x3a, 0xe1, 0xbb, 0x2a, 0x6b, 0xf2, 0xd2, 0xd1, 0x4b, 0x94, 0xc2, 0xc2,
	0x8e, 0xea, 0xf2, 0x06, 0x76, 0xec, 0x85, 0x81, 0x5e, 0xa6, 0x57, 0xa0, 0x21, 0x75, 0x7d, 0x3c,
	0xd7, 0x2b, 0x93, 0x21, 0x49, 0x89, 0xd2, 0xb5, 0x8d, 0x4f, 0xa1, 0x99, 0x89, 0x53, 0xba, 0x08,
	0xcd, 0x83, 0x71, 0x84, 0x87, 0x78, 0x1e, 0xf7, 0x98, 0xab, 0xcf, 0xf1, 0xbd, 0xb8, 0xd0, 0xf5,
	0x6d, 0x17, 0x7b, 0xde, 0x39, 0x57, 0x12, 0x0e, 0x4f, 0x2a, 0x98, 0xab, 0x97, 0xb8, 0xb4, 0x3d,
	0x76, 0x3c, 0x7e, 0x87, 0xe8, 0x65, 0x2e, 0x3d, 0xf1, 0x1c, 0x14, 0x52, 0x85, 0x36, 0xa1, 0xd6,
	0xf1, 0x46, 0x62, 0xa0, 0xb6, 0xf5, 0x0b, 0x01, 0x4d, 0x70, 0x40, 0x3f, 0x86, 0xa6, 0xcc, 0x59,
	0x29, 0xde, 0x56, 0x27, 0x74, 0xf9, 0x4b, 0xc4, 0xf8, 0xef, 0x9f, 0x0d, 0x93, 0x67, 0x6a, 0xce,
	0x51, 0x2f, 0xe9, 0x47, 0xd5, 0x80, 0xbe, 0xcf, 0xe8, 0xfa, 0xab, 0x66, 0x4f, 0xf7, 0xea, 0xc6,
	0xff, 0xfe, 0xc2, 0xc8, 0x64, 0xab, 0xad, 0x17, 0x04, 0xaa, 0x32, 0x06, 0xe8, 0x7d, 0xfe, 0x9e,
	0x97, 0xd1, 0x40, 0x8d, 0x4c, 0x59, 0x98, 0xea, 0xde, 0x8c, 0xeb, 0x85, 0xb6, 0x14, 0xfc, 0x1e,
	0xd4, 0xba, 0x4c, 0xf4, 0x80, 0x74, 0x2d, 0x09, 0xdd, 0xa2, 0x56, 0xd8, 0xf8, 0xd7, 0x2b, 0xac,
	0x29, 0xb6, 0x5f, 0x09, 0x54, 0x76, 0x87, 0x76, 0x4c, 0x8f, 0x60, 0x5e, 0x86, 0x99, 0xbc, 0xd8,
	0x69, 0x3b, 0x57, 0x84, 0x0b, 0xea, 0xbe, 0x71, 0xeb, 0x92, 0x11, 0x29, 0xd2, 0x0f, 0xa1, 0xb1,
	0xed, 0x38, 0x6a, 0xcd, 0xb5, 0x74, 0x46, 0x41, 0xd1, 0x4b, 0xb1, 0x16, 0x57, 0x18, 0x73, 0x8e,
	0xde, 0xe5, 0xa9, 0x27, 0x2e, 0x2a, 0xba, 0x92, 0x1d, 0x9b, 0x5e, 0xd4, 0xc6, 0xea, 0xb4, 0x3a,
	0x99, 0xbb, 0x4e, 0xfe, 0x4f, 0xb6, 0xbe, 0x21, 0xa0, 0x89, 0x97, 0x34, 0xdd, 0x83, 0x46, 0xfa,
	0xa4, 0xa6, 0x09, 0xd7, 0x45, 0x0f, 0x7e, 0x63, 0xad, 0xd8, 0x98, 0x62, 0xda, 0x05, 0x98, 0x74,
	0x5c, 0xb4, 0xa5, 0x46, 0xbf, 0xd4, 0x45, 0x1a, 0xd7, 0x0a, 0x2c, 0xc9, 0x22, 0x3b, 0xef, 0xc1,
	0x7f, 0x5c, 0x2f, 0x1e, 0x8e, 0x9f, 0x6e, 0xfa, 0xb6, 0xeb, 0x0d, 0xdc, 0xc8, 0x3e, 0xf5, 0xe2,
	0x8b, 0xcd, 0xc1, 0xd0, 0x8e, 0x19, 0x46, 0xa7, 0x18, 0xc9, 0xc9, 0x3b, 0x0d, 0x7e, 0x52, 0x07,
	0xfc, 0xf3, 0x80, 0x7c, 0x24, 0xff, 0x78, 0x7b, 0x5a, 0x95, 0xff, 0xc6, 0xfd, 0x11, 0x00, 0x00,
	0xff, 0xff, 0xf6, 0x2a, 0x13, 0x0d, 0x9b, 0x13, 0x00, 0x00,
}
